import{_ as a,c as i,o as e,a4 as n}from"./chunks/framework.BFd9234H.js";const t="/UF5/uf5/busquedaDicotomica.jpg",E=JSON.parse('{"title":"7. Cercar amb vectors","description":"","frontmatter":{},"headers":[],"relativePath":"7-cercar.md","filePath":"7-cercar.md"}'),l={name:"7-cercar.md"};function r(p,s,h,c,k,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="_7-cercar-amb-vectors" tabindex="-1">7. Cercar amb vectors <a class="header-anchor" href="#_7-cercar-amb-vectors" aria-label="Permalink to &quot;7. Cercar amb vectors&quot;">​</a></h1><p>Existeixen dues maneres de buscar un element dins d&#39;un vector: la cerca seqüencial i la cerca dicotòmica o binària.</p><h2 id="_7-1-cerca-sequencial" tabindex="-1">7.1. Cerca seqüencial <a class="header-anchor" href="#_7-1-cerca-sequencial" aria-label="Permalink to &quot;7.1. Cerca seqüencial&quot;">​</a></h2><p>La cerca seqüencial és la més fàcil de les dues, ja que consisteix a comparar els elements del vector amb l&#39;element a buscar.</p><p>Un exemple és el següent, on es retorna la posició de l&#39;element en el vector i si no el troba, retorna el valor-1:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> busquedaSequencial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] v, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i, posicio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> posicio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elemento)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      posicion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> posicio;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_7-2-cerca-dicotomica-o-binaria" tabindex="-1">7.2. Cerca dicotòmica o binària <a class="header-anchor" href="#_7-2-cerca-dicotomica-o-binaria" aria-label="Permalink to &quot;7.2. Cerca dicotòmica o binària&quot;">​</a></h2><p>En aquest cas el vector ha d&#39;estar ordenat. Es dividirà en dos per a buscar l&#39;element en una part del vector o en una altra i així successivament fins a trobar, o no, l&#39;element.</p><p>Un exemple és el següent:</p><p><img src="`+t+'" alt="Exemples de búsqueda dicotòmica"></p><p>En aquest cas, igual que en l&#39;anterior, la funció retorna la posició de l&#39;element o -1 si no el troba. És important veure que el vector ha d&#39;estar ordenat per a quedar-nos amb la part des de l&#39;esquerra al centre del vector o des del centre del vector a la dreta, depenent si l&#39;element a buscar és major o menor a l&#39;element del centre del vector.</p><p>Aquesta cerca és més òptima que la seqüencial ja que no ha de recórrer el vector sencer.</p>',12)]))}const m=a(l,[["render",r]]);export{E as __pageData,m as default};
