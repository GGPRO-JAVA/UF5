import{_ as e,c as r,o as n,a4 as t}from"./chunks/framework.BFd9234H.js";const p=JSON.parse('{"title":"1. Introducció","description":"","frontmatter":{},"headers":[],"relativePath":"1-introduccio.md","filePath":"1-introduccio.md"}'),s={name:"1-introduccio.md"};function i(o,a,c,l,d,m){return n(),r("div",null,a[0]||(a[0]=[t('<h1 id="_1-introduccio" tabindex="-1">1. Introducció <a class="header-anchor" href="#_1-introduccio" aria-label="Permalink to &quot;1. Introducció&quot;">​</a></h1><p>Un <strong>vector</strong> o <strong>array</strong> és una col·lecció de <strong>valors d&#39;un mateix tipus</strong> dins d&#39;una mateixa variable. De manera que es pot accedir a cada valor independentment.</p><p>Per a Java, a més, un array és un objecte que té propietats que es poden manipular.</p><p>Els arrays solucionen problemes concernents al maneig de moltes variables que es refereixen a dades similars. Per exemple si tinguérem la necessitat d&#39;emmagatzemar les notes d&#39;una classe amb 18 alumnes, necessitaríem 18 variables, amb la tremenda lentitud de maneig que suposa això.</p><p>Solament calcular la nota mitjana requeriria una tremenda línia de codi. Emmagatzemar les notes suposaria almenys 18 línies de codi.</p><p>En lloc de crear 18 variables seria molt millor crear un array de grandària 18 (és com si tinguérem una sola variable que pot emmagatzemar diversos valors).</p><p>Gràcies als arrays es pot crear un conjunt de variables amb el mateix nom. La diferència serà que un número (índex del array) distingirà a cada variable.</p>',7)]))}const _=e(s,[["render",i]]);export{p as __pageData,_ as default};
